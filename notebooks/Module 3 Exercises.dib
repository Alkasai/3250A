#!markdown

## Practice Questions

1. Create two list objects with the following elements in each: [2; 3; 7; 89; 9] [8; 9.8; 9; 8; 89]. Print each list withthe object name. For example: the output will look like this: 'List1: [2; 3; 7; 89; 9] LIst2: [8; 9.8; 9; 8; 89]'

#!fsharp

let l1 = [2.; 3.; 7.; 89.; 9.]
let l2 = [8.; 9.8; 9.; 8.; 89.]
printfn $"List1: {l1}"
printfn $"List2: {l2}"

#!markdown

2. Define a string object which states the following: 'Twinkle, twinkle, little star,How I wonder what you are! Up above the world so high, Like a diamond in the sky.'. Count the number of times the letters 'e', 'a' and 't' appear. Then, write a function to split the separate each word of the string. Hint: you can use the split() method.

#!fsharp

let printEAT (e, a, t) =
    printfn $"There are %i{e} e's"
    printfn $"There are %i{a} a's"
    printfn $"There are %i{t} t's"

#!fsharp

let s =
    "Twinkle, twinkle, little star,How I wonder what you are! Up above the world so high, Like a diamond in the sky."

let mutable e = 0
let mutable a = 0
let mutable t = 0
for i in s.ToLowerInvariant() do
    if i = 'e' then
        e <- e + 1
    elif i = 'a' then
        a <- a + 1
    elif i = 't' then
        t <- t + 1

printEAT (e, a, t)

#!markdown

Alternative solution using `fold`

#!fsharp

s.ToLowerInvariant()
|> Seq.fold
    (
        fun (e,a,t) c ->
            match c with
            | 'e' -> e + 1, a, t
            | 'a' -> e, a + 1, t
            | 't' -> e, a, t + 1
            | _ -> e, a, t
    )
    (0,0,0) // state
|> printEAT // send all 3 results to print

#!fsharp

let replace c (s: string) = s.Replace(c, " ")
let split (s: string) = s.Split(" ")
let cleanup = replace "," >> replace "!" >> replace "." >> split

s
|> cleanup
|> Seq.filter (fun w -> w <> "")
|> Seq.map (fun s -> s.ToLowerInvariant())
|> Seq.distinct
|> Seq.sort
|> List.ofSeq

#!markdown

3. Create a dictionary with the following keys and corresponding values related to cars and models: 

    * Keys: Toronto, Vancouver, Montreal, Winnipeg
    * Values: Ontario, British Columbia, Quebec, Manitoba

Write a function to add an entry to the dictionary: "Saskatoon: Saskatchewan".

#!fsharp

let locations =
    [
        "Toronto", "Ontario"
        "Vancouver", "British Columbia"
        "Montreal", "Quebec"
        "Montreal", "Manitoba"
    ]
    |> Map.ofList

let updatedLocations = locations.Add("Saskatoon", "Saskatchewan")
updatedLocations

#!fsharp

let has k (m:Map<'a,'b>) =
    m.Keys
    |> Seq.tryFind (fun key -> key = k)
    |> function
        | Some key -> true
        | None -> false

#!fsharp

updatedLocations |> has "Alberta"

#!fsharp

updatedLocations |> has "Saskatoon"

#!markdown

5. Define variables to represent the following rectangle coordinates: (2,3), (2,8), (4,3), (4,8). Then, write an if statement to check if the point (3,5) is inside the rectangle.

#!fsharp

type BottomLeft = int * int
type TopLeft = int * int
type BottomRight = int * int
type TopRight = int * int

let x1 = 2
let y1 = 3
let x2 = 4
let y2 = 8
let bottomLeft = BottomLeft (x1,y1)
let topLeft = TopLeft (x1,y2)
let bottomRight = BottomRight (x2,y1)
let topRight = TopRight (x2,y2)

#!fsharp

let inside ((x1,y1): BottomLeft) ((x2,y2): TopRight) p =
    // above bottom left point, e.g. (2,3)
    // and
    // below top right point, e.g. (4,8)
    p >= (x1,y1) && p <= (x2,y2)

#!fsharp

(3, 5) |> inside bottomLeft topRight

#!markdown

6. Write a function to compute the n-th element of the Fibonacci sequence recursively. If you need to familiarize yourself with the Fibonacci sequence, please refer to https://en.wikipedia.org/wiki/Fibonacci_number (Fibonacci number, n.d.). The function should take an integer number n as an argument and return n-th element of the Fibonacci sequence. The first two numbers in the sequence are 0 and 1, and each subsequent number is the sum of the previous two.

#!fsharp

let rec fib n =
    if n <= 1 then
        n
    else
        fib(n-2) + fib(n-1)

#!fsharp

fib(0)

#!fsharp

fib(1)

#!fsharp

fib(2)

#!fsharp

fib(3)

#!fsharp

fib(4)

#!fsharp

fib(8)
