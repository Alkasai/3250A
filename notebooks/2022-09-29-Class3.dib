#!fsharp

2+2

#!fsharp

printfn "Hello World"

#!fsharp

let pi = 3.14
let radius = 5.

#!fsharp

let area_of_circle = pi * radius ** 2.

#!fsharp

area_of_circle

#!fsharp

$"""blah blah {"some inner data"}""" // string interpolation

#!markdown

### lists

#!fsharp

let list1 = [1;3;5;10]

#!fsharp

list1

#!fsharp

let list2 = [1,2,3,"abc"] // list of tuples

#!fsharp

list2

#!fsharp

list1[0]

#!fsharp

list1[0..2]

#!fsharp

list1[..2]

#!fsharp

list1[2..]

#!markdown

### tuples

#!fsharp

let tuple1 = 1,2,3,4

#!fsharp

tuple1

#!markdown

### sets

#!fsharp

Set.ofSeq [ 1 .. 10 ]

#!fsharp

Set.ofList [1;2;3]

#!fsharp

let dictionary = Map.ofList ["ON","Toronto";"MB","Regina"]
dictionary

#!fsharp

dictionary["ON"]

#!markdown

### division

#!fsharp

5. / 3.

#!fsharp

5 / 3

#!fsharp

5 % 3

#!fsharp

5. % 3.

#!markdown

### operators

#!fsharp

5 < 4

#!fsharp

5 > 4

#!fsharp

1 < True

#!fsharp

1 = 2

#!fsharp

2 = 2

#!fsharp

1 != 2

#!fsharp

1 <> 2

#!fsharp

(3,2) > (4,1)

#!fsharp

(1,1,2022) = (2,2,2021)

#!markdown

### built-in functions

#!fsharp

list1.Length

#!fsharp

list1 |> List.sort

#!fsharp

list1 |> List.rev

#!fsharp

list1 @ [6;3;4]

#!markdown

### loops

#!fsharp

for i in list1 do
    printfn "%d" i

#!fsharp

let mutable new_list: int list = []
for i in list1 do
    new_list <- new_list @ [i*2]

#!fsharp

new_list

#!fsharp

for i in dictionary do
    printfn $"{i.Key} - {i.Value}"

#!fsharp

for (KeyValue(k,v)) in dictionary do
    printfn $"{k} - {v}"

#!markdown

### conditional statements

#!fsharp

for i in list1 do
    if i % 2 = 0 then
        printfn "%d" i

#!markdown

### custom functions

#!fsharp

list1 |> List.min

#!fsharp

list1 |> List.max

#!fsharp

(list1 |> List.sum) / (list1.Length)

#!fsharp

let mean l = (l |> List.sum) / (l.Length)

#!fsharp

list1 |> mean

#!fsharp

let fun1 a b c =
    b > a && b < c

#!fsharp

fun1 5 6 7
